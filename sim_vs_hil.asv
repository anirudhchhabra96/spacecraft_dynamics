clear all; clc;

%% === PI Hexapod Setup ===
ip = '192.168.20.3';
port = 50000;
addpath(getenv('PI_MATLAB_DRIVER'));

% Load driver
if ~exist('Controller', 'var') || ~isa(Controller, 'PI_GCS_Controller')
    Controller = PI_GCS_Controller();
end

% Connect to device
if ~exist('PIdevice', 'var') || ~PIdevice.IsConnected
    PIdevice = Controller.ConnectTCPIP(ip, port);
end
PIdevice = PIdevice.InitializeController();

% Servo on
PIdevice.SVO('X Y Z U V W', [1 1 1 1 1 1]);
pause(0.5);

% Safe home pose
PIdevice.MOV('X Y Z U V W', [0, 0, 0, 0, 0, 0]);
while PIdevice.IsMoving(), pause(0.1); end

% Velocity limit
PIdevice.VLS(20);  % deg/s or mm/s

% Constants
z_offset_cube = 99; % [mm] height of cube center above moving platform

%% === Simulate Spacecraft Rotation ===
tspan = 0:0.1:30;
omega0 = [0.001; 0.001; 0.01];     % initial angular velocity
q0 = [1; 0; 0; 0];                 % identity quaternion
x0 = [omega0; q0];
J = diag([1.0, 1.5, 2.0]);

opts = odeset('RelTol', 1e-14, 'AbsTol', 1e-18);
[T, X] = ode45(@(t, x) spacecraft_dynamics(t, x, J), tspan, x0, opts);

% Desired Euler angles (ZYX: roll-pitch-yaw)
euler_des_rad = zeros(length(T), 3);
for i = 1:length(T)
    q = X(i, 4:7)';
    euler_des_rad(i,:) = quat2eul321(q)';  % [φ θ ψ]
end
euler_des_deg = rad2deg(euler_des_rad);

%% === Command Hexapod ===
fprintf('Streaming trajectory to hexapod...\n');
actual_angles = zeros(length(T), 3);  % store [roll pitch yaw]

for i = 1:length(T)
    % Desired platform rotation that causes cube to match simulated cube rotation
    % Because cube is offset in Z, we need to rotate *platform* accordingly
    roll = euler_des_deg(i, 1);
    pitch = euler_des_deg(i, 2);
    yaw = euler_des_deg(i, 3);

    % Send platform pose [X Y Z U V W]
    % X/Y/Z = 0; U/V/W = roll/pitch/yaw
    PIdevice.MOV('X Y Z U V W', [0, 0, 0, roll, pitch, yaw]);

    % Wait for movement (or use time step)
    while PIdevice.IsMoving()
        pause(0.01);
    end

    % Read actual pose (in deg)
    current_pose = PIdevice.qPOS('U V W');
    actual_angles(i, :) = current_pose;

    % Wait for next step
    if i < length(T)
        pause(T(i+1) - T(i));
    end
end

fprintf('Trajectory complete.\n');

%% === Plot Desired vs Actual Euler Angles ===
figure;
titles = {'Roll (°)', 'Pitch (°)', 'Yaw (°)'};
for j = 1:3
    subplot(3,1,j);
    plot(T, euler_des_deg(:,j), 'b-', 'LineWidth', 1.5); hold on;
    plot(T, actual_angles(:,j), 'r--', 'LineWidth', 1.2);
    ylabel(titles{j});
    legend('Desired', 'Actual');
    grid on;
end
xlabel('Time (s)');
sgtitle('Hexapod Tracked vs Desired Cube Attitude');

%% === Shutdown ===
PIdevice.MOV('X Y Z U V W', [0, 0, 0, 0, 0, 0]);
while PIdevice.IsMoving(), pause(0.1); end
PIdevice.SVO('X Y Z U V W', [0, 0, 0, 0, 0, 0]);
PIdevice.CloseConnection();
Controller.Destroy();

%% === Dynamics Function ===
function dx = spacecraft_dynamics(~, x, J)
    omega = x(1:3);  % body angular velocity
    q = x(4:7);      % quaternion [w x y z]

    domega = J \ (-cross(omega, J*omega));
    Omega = 0.5 * [  0   -omega(1) -omega(2) -omega(3);
                    omega(1)  0    omega(3) -omega(2);
                    omega(2) -omega(3) 0    omega(1);
                    omega(3)  omega(2) -omega(1) 0];
    dq = Omega * q;
    dx = [domega; dq];
end

%% === Quaternion to Euler ZYX (3-2-1) ===
function eul = quat2eul321(q)
    w = q(1); x = q(2); y = q(3); z = q(4);
    R11 = 1 - 2*y^2 - 2*z^2;
    R21 = 2*(x*y + z*w);
    R31 = 2*(x*z - y*w);
    R32 = 2*(y*z + x*w);
    R33 = 1 - 2*x^2 - 2*y^2;
    phi = atan2(R32, R33);       % roll
    theta = -asin(R31);          % pitch
    psi = atan2(R21, R11);       % yaw
    eul = [phi; theta; psi];
end
%%
function animate_sim_vs_hexapod(T, X, actual_angles)
    figure('Name', 'Simulated vs Hexapod Cube Rotation');
    axis tight equal;
    view(3);
    set(gcf, 'Color', 'w');
    set(gca, 'Projection', 'perspective');

    % Axes limits
    cube_extent = 1.2;
    lim = cube_extent * [-1 1];
    
    % Create two subplots: left = simulated, right = hexapod
    subplot(1,2,1);
    [v, f] = create_cube();
    p1 = patch('Vertices', v, 'Faces', f, ...
        'FaceColor', [1.0 0.84 0], ...
        'EdgeColor', 'k', ...
        'FaceLighting', 'gouraud', ...
        'AmbientStrength', 0.3, ...
        'DiffuseStrength', 0.6, ...
        'SpecularStrength', 1.0, ...
        'SpecularExponent', 25, ...
        'BackFaceLighting', 'reverselit');
    light('Position',[1 2 3],'Style','infinite');
    material shiny;
    title('Simulated Cube'); axis(lim); axis vis3d; grid on;
    xlabel('X'); ylabel('Y'); zlabel('Z');
    
    subplot(1,2,2);
    p2 = patch('Vertices', v, 'Faces', f, ...
        'FaceColor', [1.0 0.84 0], ...
        'EdgeColor', 'k', ...
        'FaceLighting', 'gouraud', ...
        'AmbientStrength', 0.3, ...
        'DiffuseStrength', 0.6, ...
        'SpecularStrength', 1.0, ...
        'SpecularExponent', 25, ...
        'BackFaceLighting', 'reverselit');
    light('Position',[1 2 3],'Style','infinite');
    material shiny;
    title('Hexapod Tracked Cube'); axis(lim); axis vis3d; grid on;
    xlabel('X'); ylabel('Y'); zlabel('Z');
    
    % Animation loop
    for k = 1:5:length(T)
        % Simulated quaternion → rotation matrix
        q = X(k, 4:7)';
        R_sim = quat2rotm(q);
        v_rot_sim = (R_sim * v')';
        set(p1, 'Vertices', v_rot_sim);

        % Hexapod actual Euler → rotation matrix
        rpy_deg = actual_angles(k, :);
        R_real = eul321_to_rotm(deg2rad(rpy_deg));
        v_rot_real = (R_real * v')';
        set(p2, 'Vertices', v_rot_real);

        drawnow;
        pause(0.01);
    end
end
%%
function [v, f] = create_cube()
    v = 0.5 * [ ...
        -1 -1 -1;
         1 -1 -1;
         1  1 -1;
        -1  1 -1;
        -1 -1  1;
         1 -1  1;
         1  1  1;
        -1  1  1];
    f = [ ...
        1 2 3 4;
        5 6 7 8;
        1 2 6 5;
        2 3 7 6;
        3 4 8 7;
        4 1 5 8];
end

function R = eul321_to_rotm(eul)
    % Convert [roll pitch yaw] ZYX to rotation matrix
    phi = eul(1); theta = eul(2); psi = eul(3);
    Rz = [cos(psi) -sin(psi) 0;
          sin(psi)  cos(psi) 0;
               0         0   1];
    Ry = [cos(theta) 0 sin(theta);
                 0   1     0;
         -sin(theta) 0 cos(theta)];
    Rx = [1     0          0;
          0 cos(phi) -sin(phi);
          0 sin(phi)  cos(phi)];
    R = Rz * Ry * Rx;
end
